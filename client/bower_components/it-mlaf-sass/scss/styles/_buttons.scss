//
// Button overrides
// --------------------------------------------------

/**
* An alternative override mixin for buttons to override behavior of Bootstrap's button-variant mixin.
* $background         Background color for default state
* $border             Border color for default state
* $background-hover   Background color for hover state
* $border-hover       Border color for hover state
* $background-tapped  Background color for active/tapped/pressed state
* $border-tapped      Border color for active/tapped/pressed state
* $color              Optional color to set for ALL states instead of picking the highest contrast color, which is what we do if you do not provide this color.
*/
@mixin button-variant-override($background, $border, $background-hover, $border-hover, $background-tapped, $border-tapped, $color: null) {
	
  // if $color is passed in, use it for all states
  @if($color) {
    color: $color;
  }
  // if not, use $text-color or white (whichever has the best contrast)
  @else {
  	// calculate the appropriate text color based on the background
  	color: pick_best_color($background, (#fff, $text-color));
  }
  background: $background;
  border-color: $border;
  
  // hover/focus states
  &:hover,
  &:focus,
  &.focus {
    @if($color) {
      color: $color;
    }
    @else {
      color: pick_best_color($background-hover, (#fff, $text-color));
    }
    background-color: $background-hover;
    border-color: $border-hover;
  }

  // active/tapped/pressed states
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    @if($color) {
      color: $color;
    }
    @else {
    	color: pick_best_color($background-tapped, (#fff, $text-color));
    }
    background-color: $background-tapped;
    border-color: $border-tapped;
  }
  
  // make all disabled buttons look the same (light gray background, gray text)
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      background-color: $lighter-gray;
      color: $light-gray;
      border-color: $light-gray;
    }
  }
}

.btn {
  
  &.active {
    box-shadow: none;
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    // for the color background buttons
    &.btn-primary, &.btn-secondary, &.btn-success, &.btn-warning, &.btn-danger, &.btn-default, &.btn-link {
      // override Bootstrap opacity in favor of making all disabled buttons look the same (light gray background, gray text)
      @include opacity(1);
    }
  }
}

// Set appropriate padding for MLAF replacement carets in dropdown buttons
.btn {
  @include dropdown-toggle-padding(ms(3));
}
.btn-lg {
  @include dropdown-toggle-padding(ms(5));
}
.btn-sm {
  @include dropdown-toggle-padding(ms(2));
}
.btn-xs {
  @include dropdown-toggle-padding(ms(0));
}



// Apply override mixin to all button types
.btn-primary {
  @include button-variant-override($blue, $blue, $hover-blue, $hover-blue, $tapped-blue, $tapped-blue, #fff);
}
.btn-secondary {
  @include button-variant-override(#fff, $light-gray, $hover-gray, $light-gray, $tapped-gray, $light-gray, $blue); // override with blue text for all states
}
.btn-danger {
  @include button-variant-override($red, $red, $hover-red, $hover-red, $tapped-red, $tapped-red, #fff);
}
// btn-default, btn-success, btn-info, btn-warning are all not allowed in MLAF, so they look the same as btn-secondary
.btn-default {
  @include button-variant-override(#fff, $light-gray, $hover-gray, $light-gray, $tapped-gray, $light-gray, $blue);
}
.btn-success {
  @include button-variant-override(#fff, $light-gray, $hover-gray, $light-gray, $tapped-gray, $light-gray, $blue);
}
.btn-info {
  @include button-variant-override(#fff, $light-gray, $hover-gray, $light-gray, $tapped-gray, $light-gray, $blue);
}
.btn-warning {
  @include button-variant-override(#fff, $light-gray, $hover-gray, $light-gray, $tapped-gray, $light-gray, $blue);
}



// make disabled btn-link use the same text color as the others
.btn-link {
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      color: $light-gray;
    }
  }
}
